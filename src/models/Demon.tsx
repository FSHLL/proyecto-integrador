/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/demon/model.glb -t 
*/

import * as THREE from 'three'
import { MutableRefObject, useEffect, useRef, useState } from 'react'
import { useAnimations, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { getModelPath } from '@/helpers/path'
import { RapierRigidBody } from '@react-three/rapier'
import { distance2Points } from '@/helpers/distance'
import { useSkinnedMeshClone } from '@/helpers/clone'
import { useFrame } from '@react-three/fiber'
import { useCharacter } from '@/stores/useCharacter'

type GLTFResult = GLTF & {
  nodes: {
    Demon: THREE.SkinnedMesh
    Root: THREE.Bone
  }
  materials: {
    Atlas: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'EnemyArmature|EnemyArmature|EnemyArmature|Attack' | 'EnemyArmature|EnemyArmature|EnemyArmature|Death' | 'EnemyArmature|EnemyArmature|EnemyArmature|HitRecieve' | 'EnemyArmature|EnemyArmature|EnemyArmature|Idle' | 'EnemyArmature|EnemyArmature|EnemyArmature|Jump' | 'EnemyArmature|EnemyArmature|EnemyArmature|Run' | 'EnemyArmature|EnemyArmature|EnemyArmature|Walk'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type DemonProps = JSX.IntrinsicElements['group'] & {
  rigidBodyRef?: MutableRefObject<RapierRigidBody | undefined>
  attack?: () => void
}

export function Demon(props: DemonProps) {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useSkinnedMeshClone(getModelPath('demon')) as GLTFResult
  const { actions } = useAnimations(animations, group)

  const [attack, setAttack] = useState<boolean>(false)

  const characterRef = useCharacter((state) => state.characterRef)

  useEffect(() => {
    const animation = attack ? 'EnemyArmature|EnemyArmature|EnemyArmature|Attack' : 'EnemyArmature|EnemyArmature|EnemyArmature|Idle';
    actions[animation]?.reset().fadeIn(0.2).play();
    return () => {
      actions[animation]?.fadeOut(0.2);
    };
  }, [attack, actions]);

  useFrame(() => {
    if (props.rigidBodyRef?.current && characterRef?.current) {
      const distance = distance2Points(
        props.rigidBodyRef.current.translation(),
        characterRef.current.translation()
      )
      if (distance <= 30) {
        setAttack(true)
        if(props.attack) {
          props.attack()
        }
      }else {
        setAttack(false)
      }
    }
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group name="EnemyArmature" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <primitive object={nodes.Root} />
          </group>
          <skinnedMesh name="Demon" geometry={nodes.Demon.geometry} material={materials.Atlas} skeleton={nodes.Demon.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={47.878} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(getModelPath('demon'))
