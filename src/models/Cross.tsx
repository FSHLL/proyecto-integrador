/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/cross/model.glb -t 
*/

import * as THREE from 'three'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { getModelPath } from '@/helpers/path'
import { useRef } from 'react'
import { useFrame } from '@react-three/fiber'
import { useCharacter } from '@/stores/useCharacter'
import { distance2Points } from '@/helpers/distance'
import { useGame } from '@/stores/useGame'
import { Reward } from '@/Interfaces/Reward'

type GLTFResult = GLTF & {
  nodes: {
    group606943721: THREE.Mesh
  }
  materials: {
    mat22: THREE.MeshStandardMaterial
  }
}

type CrossProps = JSX.IntrinsicElements['group'] & {
  reward?: Reward
}

export function Cross(props: CrossProps) {
  const group = useRef<THREE.Group>(null)

  const { nodes, materials } = useGLTF(getModelPath('cross')) as GLTFResult

  const characterRef = useCharacter((state) => state.characterRef)

  const { rewards, addReword } = useGame()

  const win = new Audio(`${window.location.origin}/sounds/win.mp3`)

  useFrame(() => {
    if (group?.current && characterRef?.current) {
      const distance = distance2Points(
        group.current.position,
        characterRef.current.translation()
      )
      if (distance <= 2) {
        if (props.reward) {
          const reward = rewards.find(r => r.id === props.reward?.id && r.level === props.reward?.level)
          if (!reward) {
            addReword(props.reward)
            win.play()
          }
        }
      }
    }
  })

  return (
    <>
      <group ref={group} {...props} dispose={null}>
        <mesh geometry={nodes.group606943721.geometry} material={materials.mat22} />
      </group>
    </>
  )
}

useGLTF.preload(getModelPath('cross'))
