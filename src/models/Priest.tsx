/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/priest/model.glb -t 
*/

import * as THREE from 'three'
import { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { getModelPath } from '@/helpers/path'

type GLTFResult = GLTF & {
  nodes: {
    mug_1: THREE.Mesh
    mug_1_1: THREE.Mesh
    mug_1_2: THREE.Mesh
    outline: THREE.SkinnedMesh
    PrototypePete: THREE.SkinnedMesh
    Body: THREE.Bone
  }
  materials: {
    brownDark: THREE.MeshStandardMaterial
    greyLight: THREE.MeshStandardMaterial
    outline: THREE.MeshStandardMaterial
    PrototypePete: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'Attack(1h)' | 'AttackCombo' | 'AttackSpinning' | 'BasePose' | 'Block' | 'Cheer' | 'Climbing' | 'Dance' | 'DashBack' | 'DashFront' | 'DashLeft' | 'DashRight' | 'Defeat' | 'HeavyAttack' | 'Hop' | 'Idle' | 'Interact' | 'Jump_Idle' | 'Jump' | 'Jump_Land' | 'Jump_Start' | 'LayingDownIdle' | 'PickUp' | 'Roll' | 'Run' | 'Shoot(1h)' | 'Shoot(2h)' | 'Shoot(2h)Bow' | 'Shooting(1h)' | 'Shooting(2h)' | 'Throw' | 'Walk' | 'Wave'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

export function Priest({ withAnimations = false, ...props }: { withAnimations?: boolean }) {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useGLTF(getModelPath('priest')) as GLTFResult
  const { actions } = useAnimations(animations, group)

  useEffect(() => {
    if (withAnimations) {
      actions['Idle']?.reset().fadeIn(0.5).play();
    }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="KayKit_Animated_Character">
          <primitive object={nodes.Body} />
          <skinnedMesh name="outline" geometry={nodes.outline.geometry} material={materials.outline} skeleton={nodes.outline.skeleton} />
          <skinnedMesh name="PrototypePete" geometry={nodes.PrototypePete.geometry} material={materials.PrototypePete} skeleton={nodes.PrototypePete.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(getModelPath('priest'))
