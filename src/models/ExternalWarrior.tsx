/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { getModelPath } from '@/helpers/path'
import { useSkinnedMeshClone } from '@/helpers/clone'
import { CapsuleCollider, RapierRigidBody, RigidBody, RigidBodyProps, quat, vec3 } from '@react-three/rapier'
import { socket } from '@/components/SocketManager'
import { GroupProps } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    EyeLeft: THREE.SkinnedMesh
    EyeRight: THREE.SkinnedMesh
    Wolf3D_Body: THREE.SkinnedMesh
    Wolf3D_Hair: THREE.SkinnedMesh
    Wolf3D_Head: THREE.SkinnedMesh
    Wolf3D_Outfit_Bottom: THREE.SkinnedMesh
    Wolf3D_Outfit_Footwear: THREE.SkinnedMesh
    Wolf3D_Outfit_Top: THREE.SkinnedMesh
    Wolf3D_Teeth: THREE.SkinnedMesh
    Hips: THREE.Bone
  }
  materials: {
    Wolf3D_Eye: THREE.MeshStandardMaterial
    Wolf3D_Body: THREE.MeshStandardMaterial
    Wolf3D_Hair: THREE.MeshStandardMaterial
    Wolf3D_Skin: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Bottom: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Footwear: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Top: THREE.MeshStandardMaterial
    Wolf3D_Teeth: THREE.MeshStandardMaterial
  }
}

export function ExternalWarrior(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useSkinnedMeshClone(getModelPath('warrior')) as GLTFResult
  const { actions } = useAnimations(animations, group)

  const rbPlayer2Ref = useRef<RapierRigidBody>(null);

  const [animation, setAnimation] = useState("Idle");

  useEffect(() => {
  actions[animation]?.reset().fadeIn(0.32).play()
    return () => actions[animation]?.fadeOut(0.32)
  }, [actions, animation]);
  const movePlayer = (transforms) => {
    const { id, translation, rotation } = transforms;

    const newTranslation = vec3(translation);

    // console.log({
    //   distance: vec3(rbPlayer2Ref.current?.translation()).distanceTo(newTranslation),
    //   translation: translation
    // });

    if (vec3(rbPlayer2Ref.current?.translation()).distanceTo(newTranslation) > 0.5) {
      if (props.id === id) {
        const newRotation = quat(rotation);

        rbPlayer2Ref.current?.setTranslation(newTranslation, true);
        rbPlayer2Ref.current?.setRotation(newRotation, true);
        if (animation !== 'Walk') {
          setAnimation('Walk');
        }
      }
    } else {
      setAnimation('Idle');
    }
  };

  useEffect(() => {
    // Set up the WebSocket event listener for "player-moving"
    socket.on("player-moving", movePlayer);

    // Clean up the event listener on component unmount
    return () => {
      socket.off("player-moving", movePlayer);
    };
  }, []);

  return (
    <RigidBody
      ref={rbPlayer2Ref}
      colliders={false}
      // position={props.position}
      enabledRotations={[false, false, false]}
      includeInvisible
    >
      <CapsuleCollider
        name="character-capsule-collider"
        args={[0.35, 0.3]}
      />
      <group ref={group} position-y={-0.6} dispose={null}>
        <group name="Scene">
          <group name="Armature">
            <skinnedMesh castShadow
              name="EyeLeft"
              geometry={nodes.EyeLeft.geometry}
              material={materials.Wolf3D_Eye}
              skeleton={nodes.EyeLeft.skeleton}
              morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
              morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
            />
            <skinnedMesh castShadow
              name="EyeRight"
              geometry={nodes.EyeRight.geometry}
              material={materials.Wolf3D_Eye}
              skeleton={nodes.EyeRight.skeleton}
              morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
              morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
            />
            <skinnedMesh castShadow
              name="Wolf3D_Body"
              geometry={nodes.Wolf3D_Body.geometry}
              material={materials.Wolf3D_Body}
              skeleton={nodes.Wolf3D_Body.skeleton}
            />
            <skinnedMesh castShadow
              name="Wolf3D_Hair"
              geometry={nodes.Wolf3D_Hair.geometry}
              material={materials.Wolf3D_Hair}
              skeleton={nodes.Wolf3D_Hair.skeleton}
            />
            <skinnedMesh castShadow
              name="Wolf3D_Head"
              geometry={nodes.Wolf3D_Head.geometry}
              material={materials.Wolf3D_Skin}
              skeleton={nodes.Wolf3D_Head.skeleton}
              morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
              morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
            />
            <skinnedMesh castShadow
              name="Wolf3D_Outfit_Bottom"
              geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
              material={materials.Wolf3D_Outfit_Bottom}
              skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
            />
            <skinnedMesh castShadow
              name="Wolf3D_Outfit_Footwear"
              geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
              material={materials.Wolf3D_Outfit_Footwear}
              skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
            />
            <skinnedMesh castShadow
              name="Wolf3D_Outfit_Top"
              geometry={nodes.Wolf3D_Outfit_Top.geometry}
              material={materials.Wolf3D_Outfit_Top}
              skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
            />
            <skinnedMesh castShadow
              name="Wolf3D_Teeth"
              geometry={nodes.Wolf3D_Teeth.geometry}
              material={materials.Wolf3D_Teeth}
              skeleton={nodes.Wolf3D_Teeth.skeleton}
              morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
              morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
            />
            <primitive object={nodes.Hips} />
          </group>
        </group>
      </group>
    </RigidBody>
  )
}

useGLTF.preload(getModelPath('warrior'))
